#All SQL Queries to fetch the required information from the provided dataset

#Finding 5 oldest users:

select user_id, count(photo_id) as likes from likes group by user_id order by likes desc;
Identify Inactive Users (users with no photos)
SELECT u.username FROM users u
LEFT JOIN photos p ON u.id = p.user_id
GROUP BY u.id
HAVING COUNT(p.id) = 0 AND u.created_at >= MIN(p.created_dat);

#The five most popular hashtags:

select tag_name, count(distinct photo_id) as Number_of_photos from tags join photo_tags
on tags.id = photo_tags.tag_id
group by tag_name
order by Number_of_photos desc
limit 5;

#Most Popular Registration Date:

select
DAYOFWEEK(created_at) as Day_of_Week,
count(distinct id) as number_of_accounts_created
from users
group by
DAYOFWEEK(created_at)
order by 2 desc;

#User with most liked picture:

select username, photos.id, photos.image_url, count(likes.user_id) as Likes
from photos inner join likes
on likes.photo_id = photos.id
inner join users
on photos.user_id = users.id
group by photos.id
order by Likes desc
Limit 1;

#Number of times an average user posts on Instagram. Also the total number of
photos on Instagram/total number of users:

WITH photos_count AS (SELECT user_id, COUNT(id) as num_posts FROM photos GROUP BY user_id)
SELECT AVG(num_posts) as avg_count_of_posts, COUNT(DISTINCT user_id) as total_users, COUNT(*) as
total_photos FROM photos_count;

#Suspicious users who have liked every single photo:

select count(photo_id) as number_of_photos_liked_by_User,
user_id
from likes
group by user_id
having number_of_photos_liked_by_User = (SELECT Count(*)
FROM photos);


